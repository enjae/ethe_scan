{"version":3,"sources":["components/etherium.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blockNumber","difficulty","gasprice","blocks","web3","Web3","eth","getBlock","latest","console","log","setState","number","i","block","push","getGasPrice","gasP","react_default","a","createElement","className","style","width","class","role","scope","map","key","hash","substring","miner","timestamp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc4941e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/etherium.c11c9167.png\";","import React, {Component} from 'react'\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport './etherium.png';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  // contructor to initialize variables\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n      blockNumber: 0,\r\n      difficulty: 0,\r\n      gasprice: 0,\r\n      blocks: []\r\n    }\r\n  }\r\n\r\n\r\n  async componentWillMount (){\r\n    // First we will load Web3\r\n    let web3 = new Web3(\"https://mainnet.infura.io/v3/47d5ff4c89d94cac8937c798e4de63ee\")\r\n\r\n    // Fetch the details of the Latest Block\r\n    let latest = await web3.eth.getBlock('latest')\r\n    console.log('the_latest_Block',latest)\r\n    this.setState({\r\n      blockNumber: latest.number,\r\n      difficulty: latest.difficulty\r\n\r\n    })\r\n\r\n    let block\r\n    // create an array for storing the blocks\r\n    let blocks = []\r\n    // iterate a loop to fetch the required number of blocks(in our case =10)\r\n    for (let i = 0; i < 10; i++) {\r\n      block = await web3.eth.getBlock(latest.number - i)\r\n      console.log(block)\r\n      blocks.push(block)\r\n    }\r\n    this.setState({\r\n      blocks: blocks\r\n    })\r\n\r\n    //  Fetch the deatils of the gas price\r\n    let gasP = await web3.eth.getGasPrice()\r\n    console.log('Gas_Price', gasP)\r\n    this.setState({\r\n      gasprice: gasP\r\n\r\n    })\r\n  }\r\n\r\n  render(){\r\n\r\n   return(\r\n    <div>\r\n      <nav className=\"navbar fixed-top  flex-md-nowrap p-2 shadow fontSize-17em mr-auto\" >\r\n        <div className=\"mr-auto ml-auto mt-2\">\r\n          <h4>ethIT</h4>\r\n            <div className=\"content mr-auto ml-auto\" style={{ width: '800px' }}>\r\n              <h3>The Ethereum Blockchain Explorer</h3>\r\n            </div >\r\n        </div>\r\n      </nav>\r\n      \r\n        <div class=\"card-body ml-auto mr-auto mt-5 shadow\" style={{width: '90%'}}>\r\n          <div className=\"card-reader content ml-auto mr-auto\">\r\n            <h5>Latest Block</h5>\r\n            <p>Blocks are batches of transactions with a hash of the previous block in the chain.</p>\r\n            <hr class=\"bg-light\"></hr>\r\n            <p class=\"info\"> The value of the latest block is</p>\r\n            <p class=\"val\">{this.state.blockNumber}</p>\r\n            <hr class=\"bg-light\"></hr>\r\n            <h5>Difficulty</h5>\r\n            <p>Ethereum difficulty is a key value for every cryptocurrency. Ethereum Network difficulty is the difficulty of a problem that miners must solve to find a block. The more miners are mining Ethereum the more difficult it is to find the block to be rewarded.</p>\r\n            <hr class=\"bg-light\"></hr>\r\n            <p class=\"info\"> The current difficulty value of Ethereum is </p>\r\n            <p class=\"val\">{this.state.difficulty}</p>\r\n            <hr class=\"bg-light\"></hr>\r\n\r\n            <h5>Gas Price</h5>\r\n            <p>Gas refers to the fee, or pricing value, required to successfully conduct a transaction or execute a contract on the Ethereum blockchain platform.</p>\r\n            <hr class=\"bg-light\"></hr>\r\n            <p class=\"info\">The current value of Gas price of Ethereum is</p>\r\n            <p class=\"val\">{this.state.gasprice}</p>\r\n            <hr class=\"bg-light\"></hr>\r\n          </div>  \r\n        </div>\r\n        \r\n\r\n        \r\n      <section>\r\n        <div className=\"container-fluid mt-5 \">\r\n            <div className=\"row\">\r\n              <main role=\"main\" className=\"m-auto\">\r\n                <div className=\"content\" >\r\n                  <div className=\"row\">\r\n                    <div className=\"col-lg-12 mt-3 bg-light\">\r\n                      <div className=\"card\" style={{width:'85em'}}>\r\n                        <div className=\"card-header\">\r\n                          <h2>Whats Up with the Latest blocks</h2>\r\n                        </div>\r\n                        <div className=\"card-body1\">\r\n                          <table className=\"table\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th scope=\"col\">Block Number</th>\r\n                                <th scope=\"col\">Hash</th>\r\n                                <th scope=\"col\">Miner</th>\r\n                                <th scope=\"col\">Timestamp</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              { this.state.blocks.map((block, key) => {\r\n                                return (\r\n                                  <tr key={key} >\r\n                                    <th scope=\"row\">{block.number}</th>\r\n                                    <td>{block.hash.substring(0,25)}...</td>\r\n                                    <td>{block.miner.substring(0,25)}...</td>\r\n                                    <td>{block.timestamp}</td>\r\n                                  </tr>\r\n                                )\r\n                              }) }\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </div>\r\n         </section> \r\n    \r\n    \r\n    </div>  \r\n    \r\n\r\n   );\r\n\r\n\r\n  }\r\n}\r\n\r\n \r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}